import px


def transform_kprobe_to_stix(payload, node_name):
    parent = px.pluck(payload, 'parent')
    process = px.pluck(payload, 'process')
    container_id = px.pluck(px.pluck(px.pluck(payload, 'pod'), 'container'), 'id')
    pid = px.pluck(payload, 'pid')
    hostname = node_name
    timestamp = px.pluck(payload, 'start_time')

    corr_id = (
        px.substring(
            px.replace(r"containerd://([0-9a-f]+)", container_id, r"\1"),
            0,
            12
        ) +
        "|" +
        px.replace(r"^(\d+)$", pid, r"00000000\1") +
        "|" +
        px.replace(r"^(.{0,12}).*", hostname, r"\1") +
        px.replace(r"^.{1,11}$", hostname, "0") +
        "|" +
        px.substring(px.replace(r"[-:.]", timestamp, ""), 2, 20)
    )

    stix_id = px.select(
        corr_id != "",
        "process--" + px.substring(corr_id, 0, 36),
        ""
    )

    process_object = {
        "type": "process",
        "id": stix_id,
        "pid": pid,
        "command_line": px.pluck(process, "binary") + " " + px.pluck(process, "arguments"),
        "cwd": px.pluck(process, "cwd"),
        "created_time": timestamp,
        "extensions": {
            "flags": px.pluck(process, "flags"),
            "image_id": px.pluck(px.pluck(px.pluck(process, "pod"), "container"), "image"),
            "container_id": container_id,
            "pod_name": px.pluck(px.pluck(process, "pod"), "name"),
            "namespace": px.pluck(px.pluck(process, "pod"), "namespace"),
            "function_name": px.pluck(payload, "function_name"),
            "parent_pid": px.pluck(parent, "exec_id"),
            "parent_command_line": px.pluck(parent, "binary") + " " + px.pluck(parent, "arguments"),
            "parent_cwd": px.pluck(parent, "cwd"),
            "grand_parent_pid": px.pluck(parent, "parent_exec_id")
            #"kprobe0": kprobe(k, "kprobe0"),
            #"kprobe1": kprobe(k, "kprobe1"),
            #"kprobe2": kprobe(k, "kprobe2"),
            #"kprobe3": kprobe(k, "kprobe3"),
            #"kprobe4": kprobe(k, "kprobe4")
        }
    }

    current_time = px.pluck(payload, "time")

    observed_data_object = {
        "type": "observed-data",
        "id": stix_id,
        "created": current_time,
        "first_observed": current_time,
        "last_observed": current_time,
        "number_observed": 1,
        "object_refs": [stix_id],
        "extensions": {
            "alert_name": px.pluck(payload, "action"),
            "correlation": corr_id,
            "rule_id": px.pluck(payload, "policy_name"),
            "node_info": {"node_name": node_name},
            "children": ""
        }
    }

    return [process_object, observed_data_object]

def kprobe(k, element):
    return (
        px.pluck(px.pluck(k, element), "string_arg") or
        px.pluck(px.pluck(k, element), "int_arg") or
        px.pluck(px.pluck(k, element), "sock_arg") or
        px.pluck(px.pluck(k, element), "file_arg") or
        ""
    )


df = px.DataFrame(table="tetragon.json")

df_exec = df[df['type'] == 'process_exec']
df_kprobe = df[df['type'] == 'process_kprobe']
df.stix = transform_kprobe_to_stix(df.payload, df.node_name)
px.display(df)
