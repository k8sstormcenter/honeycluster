name: Build and push Lightening Rod
on:
  push:
    branches:
      - master 
  pull_request:



env:
  REGISTRY: ghcr.io
  IMAGE_NAME: k8sstormcenter/lightning-rod


jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=match,pattern=\d.\d.\d.*
            type=sha

      - name: Build an image from Dockerfile
        run: |
          cd lightening-rod/redis
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:0.0.1  .

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.28.0/trivy_0.28.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.28.0_Linux-64bit.deb

      - name: Scan Docker image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:0.0.1

      - name: Generate SBOM with Trivy
        run: |
          trivy image --format cyclonedx --output sbom.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:0.0.1

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json
          
      - name: Push the image if scan passes
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:0.0.1


