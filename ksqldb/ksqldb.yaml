apiVersion: v1
kind: ConfigMap
metadata:
  name: ksqldb-queries
data:
  queries.sql: |
    CREATE STREAM keygen (hash STRING KEY, value STRING)
      WITH (KAFKA_TOPIC='keygen', VALUE_FORMAT='JSON', WRAP_SINGLE_VALUE='false');

    CREATE STREAM baseline (baseline_hash STRING KEY, baseline_value STRING)
      WITH (KAFKA_TOPIC='baseline', VALUE_FORMAT='JSON', WRAP_SINGLE_VALUE='false');

    CREATE TABLE baseline_unique
      WITH (KAFKA_TOPIC='baseline_unique', VALUE_FORMAT='JSON', WRAP_SINGLE_VALUE='false')
      AS SELECT baseline_hash, LATEST_BY_OFFSET(baseline_value) AS tmp FROM baseline
      GROUP BY baseline_hash
      EMIT CHANGES;
    
    CREATE STREAM signal_text
      WITH (KAFKA_TOPIC='signal_text', VALUE_FORMAT='JSON', WRAP_SINGLE_VALUE='false')
      AS SELECT hash, value FROM keygen
      LEFT JOIN baseline_unique ON hash = baseline_hash
      WHERE baseline_hash IS NULL
      EMIT CHANGES;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ksqldb-server-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ksqldb-server
  labels:
    app: ksqldb-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ksqldb-server
  template:
    metadata:
      labels:
        app: ksqldb-server
    spec:
      containers:
      - name: ksqldb-server
        image: confluentinc/ksqldb-server:0.29.0
        ports:
        - containerPort: 8088
        volumeMounts:
          - name: ksqldb-queries
            mountPath: /etc/ksql/queries
        env:
        - name: KSQL_LISTENERS
          value: "http://0.0.0.0:8088"
        - name: KSQL_BOOTSTRAP_SERVERS
          value: "redpanda-src:9093"
        - name: KSQL_OPTS
          value: "-Dconfluent.support.metrics.enable=false"
        - name: KSQL_KSQL_QUERIES_FILE
          value: /etc/ksql/queries/queries.sql
      volumes:
      - name: ksqldb-server-pvc
        persistentVolumeClaim:
          claimName: ksqldb-server-pvc
      - name: ksqldb-queries
        configMap:
          name: ksqldb-queries
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: topology.kubernetes.io/zone
      #           operator: In
      #           values:
      #           - antarctica-east1
      #           - antarctica-west1
      # tolerations:
      #   - effect: "NoSchedule"
      #     key: "sandbox.gke.io/runtime"
      #     operator: "Equal"
      #     value: "gvisor"
