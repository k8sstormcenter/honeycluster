import json
import redis
from stix2 import Bundle, Process

REDIS_HOST = '127.0.0.1'
REDIS_PORT = 51598
REDIS_KEY = 'matches'
REDIS_OUTKEY = 'importantfields'


STIX_PATTERN = "[binary = '/usr/bin/nsenter' AND arguments = '-t 1 -a sleep 300' AND cwd = '/']"

def create_stix_indicator(log):
    indicator_id = f"indicator--{uuid.uuid4()}"
    pattern = f"[process:binary = '{log['binary']}' AND process:arguments = '{log['arguments']}' AND process:cwd = '{log['cwd']}']"
    indicator = Indicator(
        type="indicator",
        id=indicator_id,
        name="Kubehound CE_NSENTER Detection",
        description="Validated",
        pattern=pattern,
        pattern_type="stix",
        valid_from=datetime.utcnow().isoformat() + "Z"
    )
    print(indicator)
    return indicator

def create_stix_bundle(indicators):
    bundle = Bundle(objects=indicators)
    return bundle

def matches(pattern, bundle, stix_version=STIX_VERSION):
    try:
        return len(match(pattern, [bundle], stix_version=stix_version)) == 1
    except Exception as e:
        log.error(f"Error matching pattern {pattern} to bundle {bundle}: {e}")
        return False


def main():
    """Parse a tetragon log in json format from a file and print its
    STIX representation in json format to stdout"""
    # Connect to Redis
    client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT)
    # TODO : should this maybe be a consumer rather than a lrange?
    # Read Tetragon logs from Redis
    tetragon_logs = client.lrange(REDIS_OUTKEY, 0, -1)
    #extract the hash from each log
    bundle = detect_matches(tetragon_logs)
    result = matches(STIX_INDICATOR_PATTERN_EXAMPLE, OBSERVABLE_STIX_BUNDLE_EXAMPLE2)
    print(result)



if __name__ == "__main__":
    main()

