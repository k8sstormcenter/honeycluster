# Default values to deploy Falco on GKE with gVisor.
resources: {}

# Affinity constraint for pods' scheduling.
# Needed to deploy Falco on the gVisor enabled nodes.
# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: sandbox.gke.io/runtime
#           operator: In
#           values:
#           - gvisor

# Tolerations to allow Falco to run on Kubernetes 1.6 masters.
# Adds the neccesssary tolerations to allow Falco pods to be scheduled on the gVisor enabled nodes.
# tolerations:
#   - effect: NoSchedule
#     key: node-role.kubernetes.io/master
#   - effect: NoSchedule
#     key: sandbox.gke.io/runtime
#     operator: Equal
#     value: gvisor

# Enable gVisor and set the appropriate paths.
# driver:
#   enabled: true
#   kind: gvisor
#   gvisor:
#     runsc:
#       path: /home/containerd/usr/local/sbin
#       root: /run/containerd/runsc
#       config: /run/containerd/runsc/config.toml

# Enable the containerd collector to enrich the syscall events with metadata.
collectors:
  # enabled: true
  # containerd:
  #   enabled: true
  #   socket: /run/containerd/containerd.sock

  kubernetes:
    # -- enabled specifies whether the Kubernetes metadata should be collected using the k8smeta plugin and the k8s-metacollector component.
    # It will deploy the k8s-metacollector external component that fetches Kubernetes metadata and pushes them to Falco instances.
    # For more info see:
    # https://github.com/falcosecurity/k8s-metacollector
    # https://github.com/falcosecurity/charts/tree/master/charts/k8s-metacollector
    # When this option is disabled, Falco falls back to the container annotations to grab the metadata.
    # In such a case, only the ID, name, namespace, labels of the pod will be available.
    enabled: false

stdout_output:
  enabled: true

falcosidekick:
  enabled: true